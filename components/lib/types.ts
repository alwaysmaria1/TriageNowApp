// patient.types.ts

import { Id } from "convex/_generated/dataModel";

// Define the available patient statuses
export type PatientStatus =
  | "Triage In-Progress"
  | "Triage Complete"
  | "Treatment In-Progress"
  | "Treatment Complete"
  | "Transport In-Progress"
  | "Transport Complete";

// Define the available triage statuses
export type TriageStatus = "Minor" | "Delayed" | "Immediate" | "Expectant";

export type Patient = {
  // _id and _createdAt are generated by Convex when a new patient is added to the DB
  _id: Id<"patients">;
  _creationTime: number;
  barcodeID: string;
  triageMemberID: string;
  // Optional fields: If not provided, the server may fill in default values.
  address?: string;
  allergies?: string;
  dateOfBirth?: string;
  name?: string;
  patientCareNotes?: string;
  phoneNumber?: string;
  sex?: string;
  // Required fields per the DTO
  lastUpdated: string; // ISO string, e.g., from new Date().toISOString()
  patientStatus: PatientStatus; // position in continuum of care
  triageStatus: TriageStatus; //immediate, delayed, minor, expectant
  zone: string;

}
// create patient type
export interface PatientIC {
  id: string;
  priority: string;
  status: string;
  zone: string;
  zoneLeader: string;
  [key: string]: string; // Allow dynamic access for sorting 
}

// Type for creating a patient record
export interface CreatePatientDTO {
  barcodeID: string;
  triageMemberID: string;
  // Optional fields: If not provided, the server may fill in default values.
  address?: string;
  allergies?: string;
  dateOfBirth?: string;
  name?: string;
  patientCareNotes?: string;
  phoneNumber?: string;
  sex?: string;
  // Required fields per the DTO
  lastUpdated: string; // ISO string, e.g., from new Date().toISOString()
  patientStatus: PatientStatus;
  triageStatus: TriageStatus;
  zone: string;
}



// Type for editing an existing patient record.
// This mirrors the create type, so you can reuse or extend as needed.
export interface EditPatientDTO {
  barcodeID: string;
  triageMemberID: string;
  address?: string;
  allergies?: string;
  dateOfBirth?: string;
  name?: string;
  patientCareNotes?: string;
  phoneNumber?: string;
  sex?: string;
  lastUpdated: string;
  patientStatus: PatientStatus;
  triageStatus: TriageStatus;
  zone: string;
}

// Type for finding patients based on optional criteria.
// Adjust the fields as needed based on your query requirements.
export interface FindPatientsDTO {
  zone?: string;
  triageStatus?: string; // Optionally, you could use TriageStatus if you want to restrict values.
  patientStats?: string;
  recency?: string;
  sortField?: string;
  sortDirection?: string;
}

export  interface ColorScheme {
    bg: string;
    text: string;
    value: string;
    badgebg: string;
  }
  

  export type User = {
    _id: Id<"users">;
    _creationTime: number;
    // TODO create fields
    name: string,
    role: 'Incident Commander' | 'Triage',
    userID?: string;
    userZone: string;
  }

  // export interface FindUsersDTO {
  //     userZone?: string;
  // };

  // type for creating user record
export interface CreateUserDTO {
  userID: string,
  name: string,
  role: string,
  userZone: string,
};